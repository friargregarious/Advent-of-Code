###############################################################################
#
#                              ADVENT OF CODE: 2015
#                                  Let It Snow
#                      https://adventofcode.com/2015/day/25
#
###############################################################################
#
# SOLVER:   friargregarious (greg.denyes@gmail.com)
# SOLVED:   {#SOLVED}
# HOME:     https://github.com/friargregarious
# SOURCE:   https://github.com/friargregarious/AOC-2023
#
# WRITTEN AND TESTED IN PYTHON VER 3.11.6
#
###############################################################################
data = open("input.txt").read()
###############################################################################
# {example 1}


def source(data=data):
    # To continue, please consult the code grid in the manual.  Enter the code at row 2978, column 3083.
    r, c = "", ""
    sentences = data.split()
    for i, word in enumerate(sentences):
        if word == "row":
            r = int(sentences[i + 1].strip(",."))

        if word == "column":
            c = int(sentences[i + 1].strip(",."))
    return r, c


def gen_grid_loc(col, row, test=False):
    #     The codes are printed on an infinite sheet of paper, starting in the top-left corner. The codes are filled in by diagonals: starting with the first row with an empty first box, the codes are filled in diagonally up and to the right. This process repeats until the infinite paper is covered. So, the first few codes are filled in in this order:

    #    | 1   2   3   4   5   6
    # ---+---+---+---+---+---+---+
    #  1 |  1   3   6  10  15  21
    #  2 |  2   5   9  14  20
    #  3 |  4   8  13  19
    #  4 |  7  12  18
    #  5 | 11  17
    #  6 | 16

    # For example, the 12th code would be written to row 4, column 2; the 15th code would be written to row 1, column 5.

    # we will pump out these locations until we have found the index of col, row
    indices = [(1, 1)]
    for layer in range(2, row + col + 1):
        myR = int(layer)
        myC = 1

        count = 0
        while count < layer:
            indices.append((myR, myC))

            myC += 1
            myR -= 1
            count += 1
    # print(indices)
    if not test:
        return indices.index((col, row))  # , indices
    return indices.index((col, row)), indices


def gen_code(index_return, first_value=20151125):
    # The voice on the other end of the phone continues with how the codes are actually generated. The first code is 20151125. After that, each code is generated by taking the previous one, multiplying it by 252533, and then keeping the remainder from dividing that value by 33554393.

    # So, to find the second code (which ends up in row 2, column 1), start with the previous value, 20151125. Multiply it by 252533 to get 5088824049625. Then, divide that by 33554393, which leaves a remainder of 31916031. That remainder is the second code.

    # "Oh!", says the voice. "It looks like we missed a scrap from one of the manuals. Let me read it to you." You write down his numbers:

    # |    1         2         3         4         5         6
    # ---+---------+---------+---------+---------+---------+---------+
    # 1 | 20151125  18749137  17289845  30943339  10071777  33511524
    # 2 | 31916031  21629792  16929656   7726640  15514188   4041754
    # 3 | 16080970   8057251   1601130   7981243  11661866  16474243
    # 4 | 24592653  32451966  21345942   9380097  10600672  31527494
    # 5 |    77061  17552253  28094349   6899651   9250759  31663883
    # 6 | 33071741   6796745  25397450  24659492   1534922  27995004

    previous_value = first_value
    multiply_by = 252533
    divide_by = 33554393
    # grid = [[],]
    values = []
    for x in range(index_return):
        remainder = (previous_value * multiply_by) % divide_by
        previous_value = remainder

        values.append(remainder)

    return values[-1]


def solve_a(source=source):
    # print(f"Looking for code at {row}, {col}:")
    # nth_code = gen_grid_loc(4, 5)
    # print(f"The code at {row},{col} is the {nth_code} step in the generator.")
    # code_at_nth = gen_code(index_return=nth_code)
    # print(f"the code found there is {code_at_nth}")

    return gen_code(gen_grid_loc(*source()))





###############################################################################
# {example 2}

def solve_b(source):

    return solution


###############################################################################
# ENTRY POINT FOR SUBMITTING & BENCHMARKING


def main(source):
    return (solve_a(source=data), solve_b(source=source))


if __name__ == "__main__":
    # print(main(data))

    row, col = source(data)

    tests = [
        (1, 2),
        (1, 6),
        (2, 3),
        (2, 5),
        (3, 2),
        (3, 4),
        (5, 2),
        (6, 1),
    ]

    for loc in tests:
        r, c = loc
        nth, locs = gen_grid_loc(r, c, True)
        # print(locs)
        print(f"Code @ {r},{c} is {gen_code(nth)}")

    print(f"\n The Answer given from source data {row}, {col} is {solve_a()}")
    

